  {"name":"Remake_Skill_Bar","snippets":[{"name":"const","code":"const playerName = Player.Name();\nlet skillName;\nconst editBtn = {\n  cls: \"btn grey disabled\",\n  id: \"presetedit\",\n  name: \"Edit\"\n};\nconst resetBtn = {\n  cls: \"btn border black\",\n  id: \"resetskillbar\",\n  name: \"R\", \n  style: \"width: 16px; text-align: center;\"\n};\nconst matrixSkill_ID = {\n\twarrior: ['0', '1', '2', '3', '8', '17', '18', '19', '20', '21', '33', '34', '39', '40', '41', '46', '50'],\n\tshaman: ['0', '6', '7', '8', '12', '13', '28', '30', '35', '36', '37', '39', '40', '42', '43', '47'],\n\tmage: ['4', '8', '14', '15', '16', '22', '23', '24', '32', '39', '40', '51', '52', '53'],\n\tarcher: ['5', '8', '9', '10', '11', '25', '26', '27', '29', '31', '38', '39', '40', '45', '48', '49', '54']\n};","active":true,"eval":true},{"name":"_Modal","code":"const buildData = {\n\tname: `Edit`,\n\telement: \"mainMenuButton\",\n\tid: \"syseditpresetskill\",\n\tcls: \"r2_syseditpresetskill\",\n\tnx: \"edit_preset_skill\",\n\tbase: \"windowPanel\",\n\tclose: Classes.closefeature,\n\tinternal: \"innerPartySignup\",\n\tbtn: \"L\",\n\tposition: {\n\t\ttop: 150,\n\t\tleft: 150\n\t},\n\tmodable: true,\n\tsize: {\n\t\twidth: 0,\n\t\theight: 0\n\t},\n\tresize: true\n}\nconst h = `<div class=\"settings\">\n  <div class=\"textprimary bartenderpacer\" id=\"name\">${skillName}</div>\n  <table class=\"marg-top panel-black playerlist\" style=\"min-width: 320px;\">\n    <tr>\n      <td>\n        <div class=\"divruindiv\"> Rune <br />\n          <small class=\"textgrey\">hide/show rune bar</small>\n        </div>\n      </td>\n      <td>\n        <input class=\"btn checkbox editpreset rune\" id=\"rune\" type='checkbox' style=\"width: 20px; height: 20px\">\n      </td>\n    <tr>\n      <td>\n        <small class=\"textgrey\">left postions</small>\n      </td>\n      <td>\n        <input class=\"editinput left rune\" id=\"rune\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <small class=\"textgrey\">top postions</small>\n      </td>\n      <td>\n        <input class=\"editinput top rune\" id=\"rune\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"divruindiv\"> Charm <br />\n          <small class=\"textgrey\">hide/show charm bar</small>\n        </div>\n      </td>\n      <td>\n        <input class=\"btn checkbox editpreset charm\" id=\"charm\" type='checkbox' style=\"width: 20px; height: 20px\">\n      </td>\n    <tr>\n      <td>\n        <small class=\"textgrey\">left postions</small>\n      </td>\n      <td>\n        <input class=\"editinput left charm\" id=\"charm\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <small class=\"textgrey\">top postions</small>\n      </td>\n      <td>\n        <input class=\"editinput top charm\" id=\"charm\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"divruindiv\"> Misc <br />\n          <small class=\"textgrey\">hide/show misc bar</small>\n        </div>\n      </td>\n      <td>\n        <input class=\"btn checkbox editpreset misc\" id=\"misc\" type='checkbox' style=\"width: 20px; height: 20px\">\n      </td>\n    <tr>\n      <td>\n        <small class=\"textgrey\">left postions</small>\n      </td>\n      <td>\n        <input class=\"editinput left misc\" id=\"misc\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <small class=\"textgrey\">top postions</small>\n      </td>\n      <td>\n        <input class=\"editinput top misc\" id=\"misc\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"divruindiv\"> Pet And Mount <br />\n          <small class=\"textgrey\">hide/show pet mount bar</small>\n        </div>\n      </td>\n      <td>\n        <input class=\"btn checkbox editpreset petMount\" id=\"petMount\" type='checkbox' style=\"width: 20px; height: 20px\">\n      </td>\n    <tr>\n      <td>\n        <small class=\"textgrey\">left postions</small>\n      </td>\n      <td>\n        <input class=\"editinput left petMount\" id=\"petMount\" type='number'>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <small class=\"textgrey\">top postions</small>\n      </td>\n      <td>\n        <input class=\"editinput top petMount\" id=\"petMount\" type='number'>\n      </td>\n    </tr>\n  </table>\n</div>`;\n(async () => {\n\tawait Modal.Create(buildData, {\n\t\thtml: h\n\t}, false)\n})();","active":true,"eval":true},{"name":"_Settings","code":"class _Settings {\n\tstatic #_instance = null;\n\tstatic getInstance() {\n\t\tif (this._instance == null) this._instance = new _Settings();\n\t\treturn this._instance;\n\t}\n\tgetLocalStorage(storageName) {\n\t\treturn JSON.parse(localStorage.getItem(storageName));\n\t}\n\tsetLocalStorage(storageName, data) {\n\t\tlocalStorage.setItem(storageName, JSON.stringify(data));\n\t}\n\tasync getScoutPreset() {\n\t\tconst res = await Player.Class(playerName);\n\t\tconst storage = this.getLocalStorage('scout-skillpresets');\n\t\treturn storage[res.type];\n\t}\n\tasync getScoutPresetByPresetName(name) {\n\t\tconst sts = await this.getScoutPreset()\n\t\treturn sts.filter(item => item.name == name)[0];\n\t}\n\tsetSkillSettings(data) {\n\t\tthis.setLocalStorage(\"SkillBar_Settings\", data);\n\t}\n\tgetSkillSettings() {\n\t\treturn this.getLocalStorage('SkillBar_Settings');\n\t}\n\tgetSkillSettingsByPlayerName(playerName) {\n\t\tconst sts = this.getSkillSettings();\n\t\treturn sts[playerName];\n\t}\n\tgetSkillSettingsByPlayerNameAndSkillName(playerName, skillName) {\n\t\tconst sts = this.getSkillSettingsByPlayerName(playerName);\n\t\treturn sts[skillName];\n\t}\n\tcreateSkillSettings() {\n\t\tlet skillBar_Settings = this.getSkillSettings();\n\t\tif (skillBar_Settings == null) skillBar_Settings = {};\n\t\tif (skillBar_Settings[playerName] == null) skillBar_Settings[playerName] = {};\n\t\tskillBar_Settings[playerName][skillName] = {\n\t\t\tskill: {\n\t\t\t\tdisplay: 'block'\n\t\t\t},\n\t\t\tcharm: {\n\t\t\t\ttop: -100,\n\t\t\t\tleft: 0,\n\t\t\t\tdisplay: 'block'\n\t\t\t},\n\t\t\trune: {\n\t\t\t\ttop: -100,\n\t\t\t\tleft: 300,\n\t\t\t\tdisplay: 'block'\n\t\t\t},\n\t\t\tpetMount: {\n\t\t\t\ttop: -200,\n\t\t\t\tleft: 0,\n\t\t\t\tdisplay: 'block'\n\t\t\t},\n\t\t\tmisc: {\n\t\t\t\ttop: -200,\n\t\t\t\tleft: 100,\n\t\t\t\tdisplay: 'block'\n\t\t\t},\n\t\t\tother: {\n\t\t\t\tdisplay: 'none'\n\t\t\t},\n\t\t}\n\t\tthis.setSkillSettings(skillBar_Settings);\n\t}\n\tsetCheckBox(id, flg) {\n\t\tconst sts = this.getSkillSettings();\n\t\tsts[playerName][skillName][id].display = flg == true ? 'block' : 'none';\n\t\tthis.setSkillSettings(sts);\n\t}\n\tsetInputValue(id, type, value) {\n\t\tconst sts = this.getSkillSettings();\n\t\tsts[playerName][skillName][id][type] = parseInt(value);\n\t\tthis.setSkillSettings(sts);\n\t}\n\tgetSkillName() {\n\t\treturn this.getLocalStorage('SkillName');\n\t}\n\tgetSkillNameByPlayerName() {\n\t\treturn this.getSkillName()[playerName];\n\t}\n\tsetSkillName(name) {\n\t\tlet skills = this.getSkillName();\n\t\tif (skills == null) skills = {};\n\t\tif (skills[playerName] == null) skills[playerName] = {};\n\t\tskills[playerName] = name;\n\t\tthis.setLocalStorage('SkillName', skills);\n\t}\n\tdeleteSkillSetting() {\n\t\tconst sss = this.getSkillSettings();\n\t\tconst t = sss[playerName];\n\t\tdelete t[skillName];\n                sss[playerName] = t;\n\t\tthis.setSkillSettings(sss);\n\t}\n}","active":true,"eval":true},{"name":"_SkillBar","code":"class _SkillBar {\n\tasync load() {\n\t\tconst ui = _UI.getInstance();\n\t\tconst _data = await this.getSkillPreset();\n\t\tlet skillSize = 0,\n\t\t\tcharmSize = 0,\n\t\t\tmiscSize = 0,\n\t\t\truneSize = 0,\n\t\t\tpetSize = 0;\n\t\tfor (var el of $('#skillbar').children()) {\n\t\t\tconst img_ = el.getElementsByTagName('img');\n\t\t\tfor (var img of img_) {\n\t\t\t\tlet src = img.src;\n\t\t\t\tif (src.indexOf('charm') > 0) ui.addStyle(el, 'charm', true, charmSize++);\n\t\t\t\telse if (src.indexOf('rune') > 0) ui.addStyle(el, 'rune', true, runeSize++);\n\t\t\t\telse if ((src.indexOf('pet') + src.indexOf('mount')) > 0)\n\t\t\t\t\tui.addStyle(el, 'petMount', true, petSize++);\n\t\t\t\telse if (src.indexOf('misc') > 0) ui.addStyle(el, 'misc', true, miscSize++);\n\t\t\t\telse {\n\t\t\t\t\tconst val = this.sliceSkill(src);\n\t\t\t\t\tif (_data.includes(val) || val == '40') ui.addStyle(el, 'skill', false, skillSize++);\n\t\t\t\t\telse ui.addStyle(el, 'other', false, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$('#skillbar').css(\"gridTemplateColumns\", `repeat(${skillSize + 1}, auto)`);\n\t\tconst sts = _Settings.getInstance();\n\t\tsts.setSkillName(skillName);\n\t}\n\tasync getSkillPreset() {\n\t\tconst sts = _Settings.getInstance();\n\t\tconst skillIDs = await sts.getScoutPresetByPresetName(skillName);\n\t\tconst skillData = skillIDs.data;\n\t\tconst skill_IDs = [];\n\t\tconst _ = await Player.Class(playerName);\n\t\tskill_IDs.push(matrixSkill_ID[_.type][0])\n\t\tfor (let i = 1, size = skillData.length; i < size; i++) {\n\t\t\tif (skillData[i] != 0) skill_IDs.push(matrixSkill_ID[_.type][i]);\n\t\t}\n\t\treturn skill_IDs;\n\t}\n\tsliceSkill(s) {\n\t\tlet src = s;\n\t\tconst baseStr = 'https://hordes.io/assets/ui/skills/';\n\t\tsrc = src.replace(baseStr, \"\");\n\t\tconst pos = src.indexOf('.');\n\t\tlet val = src.slice(0, pos);\n\t\tval = val.replace('_grey', '');\n\t\treturn val;\n\t}\n}","active":true,"eval":true},{"name":"_UI","code":"class _UI {\n\t#_instance = null;\n\tstatic getInstance() {\n\t\tif (this._instance == null) this._instance = new _UI();\n\t\treturn this._instance;\n\t}\n\tconstructor() {\n\t\tthis.setResetButton();\n\t}\n\tsetResetButton() {\n\t\tconst html = `<div id=\"${resetBtn.id}\" class=\"${resetBtn.cls}\" style=\"${resetBtn.style}\">${resetBtn.name}</div>`;\n\t\tUI.Append($('.btnbar')[0], html);\n\t}\n\tsetEditButton() {\n\t\tconst btn_html = `<div class=\"${editBtn.cls}\" id=\"${editBtn.id}\">${editBtn.name}</div>`;\n\t\tUI.Append($(`.presetbuttons`), btn_html);\n\t\t$(`.presetbuttons`).css(\"gridTemplateColumns\", \"60px 60px 60px 60px\");\n\t}\n\t// type : ['skill', 'charm', 'rune', 'pet', 'misc', 'other']\n\taddStyle(el, type, flg, i) {\n\t\tconst sts = _Settings.getInstance();\n\t\tlet settings = sts.getSkillSettings();\n\t\tif (settings == null || settings[playerName] == null || settings[playerName][skillName] == null) {\n\t\t\tsts.createSkillSettings();\n\t\t}\n\t\tconst settingsByType = sts.getSkillSettingsByPlayerNameAndSkillName(playerName, skillName)[type];\n\t\tthis.styleElement(el, settingsByType.top, i + 1, settingsByType.left, settingsByType.display, flg);\n\t}\n\tstyleElement(el, top, size, left, display, flg) {\n\t\tif (flg == true) {\n\t\t\tel.style.position = 'absolute';\n\t\t\tel.style.border = '1px solid';\n\t\t\tel.style.margin = '1px';\n\t\t}\n\t\tif (top !== null) el.style.top = `${top}%`;\n\t\tif (left !== null) el.style.left = `${left+ (el.offsetWidth+1)*(size -1) + 2*(size -1)}px`;\n\t\tel.style.display = display;\n\t}\n\tclearBtnPreset() {\n\t\t$('.presetchoose').removeClass(\"green\").addClass(\"grey\");\n\t}\n\tclearBtnPresetBox() {\n\t\t$('.presetbox').removeClass(\"selected\");\n\t}\n}","active":true,"eval":true},{"name":"_Event","code":"class _Event {\n\tui = _UI.getInstance();\n\tstatic #_instance = null;\n\tstatic getInstance() {\n\t\tif (this._instance == null) this._instance = new _Event();\n\t\treturn this._instance;\n\t}\n\tconstructor() {\n\t\tInject.AddExecuteOnWindowLoad('skills', this.ui.setEditButton);\n\t\tInject.AddExecuteOnWindowLoad('skills', this.eventOnPresetBox);\n\t\tInject.AddExecuteOnWindowLoad('skills', this.eventOnPresetBtn);\n\t\tInject.AddExecuteOnWindowLoad('skills', this.eventOnBtnDelete);\n\t\tUI.Delegate(`.btnbar`, \"click\", `#${resetBtn.id}`, this.resetSkillBar);\n\t}\n\teventOnPresetBox() {\n\t\tUI.Delegate(`.presetlist`, \"click\", '.panel-bright.presetbox', function() {\n\t\t\tconst event = _Event.getInstance();\n\t\t\tskillName = $(\".panel-bright.presetbox.selected\").find(\".name\").text();\n\t\t\tevent.enableEditBtn();\n\t\t});\n\t}\n\teventOnPresetBtn() {\n\t\t$('.btn.presetchoose').click(() => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif ($(`.${buildData.cls}`).is(\":visible\"))\n\t\t\t\t\t$(`.${buildData.cls}`).hide();\n\t\t\t\tskillName = $('.btn.presetchoose.green').parent().parent().find('.name').text();\n\t\t\t\tconst ui = _UI.getInstance();\n\t\t\t\tui.clearBtnPresetBox();\n\t\t\t\t$('.btn.presetchoose.green').parent().parent().addClass(\"selected\");\n\t\t\t\tconst sb = new _SkillBar();\n\t\t\t\tsb.load();\n\n\t\t\t\tsb.load();\n\t\t\t}, 100);\n\t\t});\n\t}\n\tenableEditBtn() {\n\t\t$(`#${editBtn.id}`).removeClass(\"disabled\");\n\t\tUI.Delegate(`.presetbuttons`, \"click\", `#${editBtn.id}`, this.openModalEdit);\n\t}\n\tresetSkillBar() {\n\t\t$(\"#skillbar\").children().removeAttr(\"style\");\n\t\t$(\"#skillbar\").css(\"gridTemplateColumns\", `repeat(15, auto)`);\n\t}\n\topenModalEdit() {\n\t\tconst ui = _UI.getInstance();\n\t\tui.clearBtnPreset();\n\t\t$('.presetlist').find('.presetbox.selected').find('.btn.presetchoose').click();\n\t\tsetTimeout(() => {\n\t\t\tconst evt = _Event.getInstance();\n\t\t\tif ($(`.${buildData.cls}`).is(\":visible\"))\n\t\t\t\t$(`.${buildData.cls}`).hide();\n\t\t\t$(`.${buildData.cls}`).show();\n\t\t\t$(`.${buildData.cls}`).find(`#name`).text(skillName);\n\t\t\tevt.passDataToModal();\n\t\t}, 100)\n\n\t}\n\tpassDataToModal() {\n\t\tconst sts = _Settings.getInstance();\n\n\t\tif (sts.getSkillSettings() == null || sts.getSkillSettings()[playerName] == null || sts.getSkillSettings()[playerName][skillName] == null) sts.createSkillSettings(name);\n\t\tconst settings = sts.getSkillSettingsByPlayerNameAndSkillName(playerName, skillName);\n\t\tfor (let item in settings) {\n\t\t\t$(`.btn.checkbox.editpreset.${item}`).prop(\"checked\", settings[item].display == 'block' ? true : false);\n\t\t\t$(`.editinput.left.${item}`).val(settings[item].left);\n\t\t\t$(`.editinput.top.${item}`).val(settings[item].top);\n\t\t\tUI.Delegate(`.marg-top.panel-black.playerlist`, \"click\", `.btn.checkbox.editpreset.${item }`, this.checkboxChange, item);\n\t\t\tUI.Delegate(`.marg-top.panel-black.playerlist`, \"focusout\", `.editinput.left.${item }`, this.inputChange, {\n\t\t\t\tid: item,\n\t\t\t\ttype: 'left'\n\t\t\t})\n\n\t\t}\n\t}\n\tcheckboxChange(data) {\n\t\tconst sb = new _SkillBar();\n\t\tconst _sts = _Settings.getInstance();\n\t\tconst checked = $(`.btn.checkbox.editpreset.${data}`).prop(\"checked\");\n\t\t_sts.setCheckBox(data, checked);\n\t\tsb.load();\n\t\tsb.load();\n\t}\n\tinputChange(data) {\n\t\tconst sb = new _SkillBar();\n\t\tconst _sts = _Settings.getInstance();\n\t\tconst value = $(`.editinput.${data.type}.${data.id}`).val();\n\t\t_sts.setInputValue(data.id, data.type, value);\n\t\tsb.load();\n\t\tsb.load();\n\t}\n\teventOnBtnDelete() {\n\t\tUI.Delegate(`.presetbuttons`, \"click\", `#presetdelete`, () => {\n\t\t\t_Settings.getInstance().deleteSkillSetting();\n\t\t});\n\t}\n}","active":true,"eval":true},{"name":"_run","code":"const event = _Event.getInstance();\nconst skillbar = new _SkillBar();\nconst sts = _Settings.getInstance();\nskillName = sts.getSkillName();\nif (sts.getSkillNameByPlayerName() != null) {\n\tskillName = sts.getSkillNameByPlayerName();\n\tskillbar.load();\n}\nconsole.log(\"Custom For Skill Bar\");","active":true,"eval":true}]}
